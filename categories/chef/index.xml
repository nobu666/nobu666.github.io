<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chef on Real Beat</title>
    <link>http://nobu666.com/categories/chef.html</link>
    <description>Recent content in Chef on Real Beat</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 13 Mar 2013 15:36:50 +0900</lastBuildDate>
    <atom:link href="http://nobu666.com/categories/chef.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Chef11のchef-serverをHA構成にする</title>
      <link>http://nobu666.com/2013/03/13/0985.html</link>
      <pubDate>Wed, 13 Mar 2013 15:36:50 +0900</pubDate>
      
      <guid>http://nobu666.com/2013/03/13/0985.html</guid>
      <description>&lt;h1&gt;Chef11のchef-serverをHA構成にする&lt;/h1&gt;

&lt;h2&gt;はじめに&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://wiki.opscode.com/display/chef/Chef+11+Server+Preview&#34; title=&#34;Chef11&#34;&gt;Chef11&lt;/a&gt;はいままでのChefとはserverの構成がガラリと変わり、APIがRubyからErlangに、バックエンドのCouchDBがPostgreSQLになりました。その他はフロントエンドには&lt;a href=&#34;http://nginx.org/&#34; title=&#34;nginx&#34;&gt;nginx&lt;/a&gt;、WebUIに&lt;a href=&#34;http://unicorn.bogomips.org/&#34; title=&#34;unicorn&#34;&gt;unicorn&lt;/a&gt;。&lt;a href=&#34;http://www.rabbitmq.com/&#34; title=&#34;RabbitMQ&#34;&gt;RabbitMQ&lt;/a&gt;と&lt;a href=&#34;http://lucene.apache.org/solr/&#34; title=&#34;Solr&#34;&gt;Solr&lt;/a&gt;はそのまま。&lt;/p&gt;

&lt;p&gt;基本的にそのまま使ってて問題ないのだけども、やはりサーバーは壊れるのでバックアップがないと困るよね、ということで調べてもあんまり情報がなかったので、やってみたメモを残します。めんどいのでrootで作業しています。&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;とりあえずinstallする&lt;/h2&gt;
先ほどの&lt;a href=&#34;http://wiki.opscode.com/display/chef/Chef+11+Server+Preview&#34; title=&#34;Chef11&#34;&gt;Chef11&lt;/a&gt;のWikiにある、Quick Startをみて、Platformにあったパッケージをダウンロード。もしくは&lt;a href=&#34;http://www.opscode.com/chef/install/&#34; title=&#34;Install Chef&#34;&gt;Install Chef&lt;/a&gt;というページからダウンロード。Debian6でやりましたが、Ubuntu12用のパッケージではうまく動きませんでしたので、Ubuntu10用のを使いました。11のは知らん。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# wget https://opscode-omnitruck-release.s3.amazonaws.com/ubuntu/10.04/x86_64/chef-server_11.0.6-1.ubuntu.10.04_amd64.deb
# dpkg -i chef-server_11.0.6-1.ubuntu.10.04_amd64.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PrimaryとSecondary、2台のサーバーに入れましょう。&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;PostgreSQLのReplication&lt;/h2&gt;
PostgreSQLはほとんど知らないし、Chef11のパッケージは /opt/chef-server 以下にRubyやGemsやPostgreSQLやその他依存もろもろすっぽり収まって完結しているため、普通にPostgreSQLをinstallした場合とは勝手がちょっと違うので注意が必要です。&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Primaryの設定&lt;/h3&gt;
設定ファイルは /var/opt/chef-server/postgresql/data 以下にあります。まずアクセス許可。SECONDARY_SERVER_IPADDRESSは任意に読み替えてください。サブネットマスクまで必須です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# echo &amp;amp;quot;host replication repl_user SECONDARY_SERVER_IPADDRESS/0 trust&amp;amp;quot; &amp;amp;gt;&amp;amp;gt; /var/opt/chef-server/postgresql/data/pg_hba.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次にReplicationの設定。/var/opt/chef-server/postgresql/data/postgresql.conf をエディタで開いて、以下のようにします。hot_standby = onの設定はここでは意味が無いですが、あとでこのファイルがそのままSecondary側にコピーされるのでここで変えておいて問題ないです。
&lt;ul&gt;
    &lt;li&gt;listen_addresses = &amp;lsquo;*&amp;rsquo;&lt;/li&gt;
    &lt;li&gt;wal_level = hot_standby&lt;/li&gt;
    &lt;li&gt;max_wal_senders = 1&lt;/li&gt;
    &lt;li&gt;hot_standby = on&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;次にPostgreSQLのシェルに入ってユーザーを作りますが、opscode-pgsqlユーザーにならないとシェルに入れないので面倒です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# su opscode-pgsql -
$ pgsql postgres -c &amp;amp;quot;CREATE ROLE repl_user LOGIN REPLICATION PASSWORD &#39;P@ssw0Rd&#39;&amp;amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここまでやったらPostgreSQLを再起動。Chef11のコンポーネントたちは、daemontoolsの下で動いているので普通には再起動できません。が、専用の管理コマンドが用意されているのでそいつを使います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# chef-server-ctl restart postgresql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;Secondaryの設定&lt;/h3&gt;
Primaryからdebファイルをscpするなりこっちでもwgetするなりして、dpkg -iまでは一緒。installが終わったらPostgreSQLまわりの掃除をします。とりあえず止めて、消す。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# chef-server-ctl stop postgresql
# rm -rf /var/opt/chef-server/postgresql/data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;消したらPrimaryからデータを持ってきます。PRIMARY_SERVER_IPADDRESSは任意に読み替えてください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# /opt/chef-server/embedded/bin/pg_basebackup -x -p 5432 -h PRIMARY_SERVER_IPADDRESS -U repl_user -W -D /var/opt/chef-server/postgresql/data --progress --verbose
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;終わったらrecovery.confを作ります。sampleからコピって書き換えます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cp /opt/chef-server/embedded/share/postgresql/recovery.conf.sample /var/opt/chef-server/postgresql/data/recovery.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/var/opt/chef-server/postgresql/data/recovery.conf で最低限以下のようにいじる。application_nameは別になんでもいいっぽいです。
&lt;ul&gt;
    &lt;li&gt;standby_mode = on&lt;/li&gt;
    &lt;li&gt;primary_conninfo = &amp;lsquo;host=PRIMARY_SERVER_IPADDRESS port=5432 user=repl_user password=P@ssw0Rd application_name=stby&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;あとはrootで作業してしまったのでownerを変えて起動。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# chown -R opscode-pgsql:opscode-pgsql /var/opt/chef-server/postgresql/data
# chef-server-ctl start postgresql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;chef-server-ctl tailでログをみたり、chef-server-ctl statusでpostgresqlがrunになっていることを確認できればOKです。また、Primary側で以下のコマンドを叩くことでも確認できます。stateがstreamingになっていればOK。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo -u opscode-pgsql psql opscode_chef -c &amp;amp;quot;SELECT * FROM pg_stat_replication&amp;amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;念のためSolrのindexは作りなおしておいたほうがいいです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# chef-server-ctl reindex
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h2&gt;切り替える&lt;/h2&gt;
さてフェイルオーバーさせてみます。いくつか方法がありますが、とりあえず手動でやります。Secondary側で、opscode-pgsqlユーザーで操作します。SecondaryはRead-Onlyなので、 CREATE TABLE test (i integer) とかやって失敗→切り替え→もっかいやったら成功、でPrimaryになったことを確認できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ /opt/chef-server/embedded/bin/pg_ctl promote -D /var/opt/chef-server/postgresql/data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんだけ。また2台構成に戻すには、同じ事をやってやればいいはずです。が、時間経ちすぎてWALファイルがなくなっちゃったとか、転送前にコケてて欠落してるとか、そういう場合はその限りではありません。ていうかそれはChefと関係ないんでそっち方面のマニュアルみるなり調べるなりしてください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>UbuntuにOpenGrokをinstall</title>
      <link>http://nobu666.com/2013/03/05/0974.html</link>
      <pubDate>Tue, 05 Mar 2013 14:36:15 +0900</pubDate>
      
      <guid>http://nobu666.com/2013/03/05/0974.html</guid>
      <description>&lt;p&gt;俺メモ&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install openjdk-6-jdk
sudo apt-get install tomcat7
wget http://prdownloads.sourceforge.net/ctags/ctags-5.8.tar.gz
tar xf ctags-5.8.tar.gz
cd ctags-5.8/
./configure &amp;amp;amp;&amp;amp;amp; make &amp;amp;amp;&amp;amp;amp; sudo make install
cd ..
wget http://hub.opensolaris.org/bin/download/Project+opengrok/files/opengrok-0.11.1.tar.gz
tar xf opengrok-0.11.1.tar.gz
wget http://jflex.de/jflex-1.4.3.tar.gz
tar xf jflex-1.4.3.tar.gz
cp jflex-1.4.3/lib/JFlex.jar opengrok-0.11.1/lib/lib/
echo &amp;amp;quot;export JAVA_HOME=/usr/lib/jvm/java-6-openjdk-amd64&amp;amp;quot; &amp;amp;gt;&amp;amp;gt; .bashrc
echo &amp;amp;quot;EXUBERANT_CTAGS=/usr/local/bin/ctags&amp;amp;quot; &amp;amp;gt;&amp;amp;gt; .bashrc
sudo sed -i &amp;amp;quot;s/port=\&amp;amp;quot;8080\&amp;amp;quot;/port=\&amp;amp;quot;2424\&amp;amp;quot;/&amp;amp;quot; /etc/tomcat7/server.xml
sudo /etc/init.d/tomcat restart
sudo mkdir -p /var/opengrok/{etc,data,src}
sudo chown -R tomcat7:tomcat7 /var/opengrok
sudo chown -R `whoami`:`whoami` /var/opengrok/src
sudo -u tomcat7 opengrok-0.11/bin/OpenGrok index
sudo -u tomcat7 OPENGROK_TOMCAT_BASE=/var/lib/tomcat7 opengrok-0.11/bin/OpenGrok deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは /var/opengrok-0.11.1/src に検索対象のソースコード突っ込んでOpenGrok indexし直すだけ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ChefでRoleやRecipeを実行するとき渡すべき必須のattributesをチェックする</title>
      <link>http://nobu666.com/2013/02/21/0959.html</link>
      <pubDate>Thu, 21 Feb 2013 16:06:57 +0900</pubDate>
      
      <guid>http://nobu666.com/2013/02/21/0959.html</guid>
      <description>&lt;p&gt;例えばlvsを構築するときに、その下にぶら下がるreal serverたちのIPアドレスとかって、chef-client実行するときに-jオプション使ってjsonでattributes渡して欲しいわけですが、実際に実行する前に必須のものがなければ弾きたい、と思って色々ためした結果&lt;/p&gt;

&lt;p&gt;Roleならjsonに、Recipeならattributes/default.rbに、&lt;strong&gt;required&lt;/strong&gt;とかそういう感じの名前でattributesを作って、そこに配列で指定必須のattributesを並べて書いておく。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;amp;quot;name&amp;amp;quot;: &amp;amp;quot;nannchara-kannchara&amp;amp;quot;,
  &amp;amp;quot;default_attributes&amp;amp;quot;: {
  },
  &amp;amp;quot;json_class&amp;amp;quot;: &amp;amp;quot;Chef::Role&amp;amp;quot;,
  &amp;amp;quot;env_run_lists&amp;amp;quot;: {
  },
  &amp;amp;quot;run_list&amp;amp;quot;: [
    &amp;amp;quot;recipe[foo]&amp;amp;quot;,
    &amp;amp;quot;recipe[bar::baz]&amp;amp;quot;
  ],
  &amp;amp;quot;description&amp;amp;quot;: &amp;amp;quot;hogeraccho&amp;amp;quot;,
  &amp;amp;quot;chef_type&amp;amp;quot;: &amp;amp;quot;role&amp;amp;quot;,
  &amp;amp;quot;override_attributes&amp;amp;quot;: {
      &amp;amp;quot;__required__&amp;amp;quot;: [
        &amp;amp;quot;test&amp;amp;quot;,
        &amp;amp;quot;test1&amp;amp;quot;,
        &amp;amp;quot;test2&amp;amp;quot;
      ]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;んで knife role from file nannchara-kannchara.json すると、knife search コマンドで取り出せるようになるので、あとは適当に整形すれば一覧として取り出せる&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ knife search role -F json -q &amp;amp;quot;name:nannchara-kannchara AND __required__:*&amp;amp;quot; | tr -d &#39;\n&#39; | tr -d &#39; &#39; | grep -oE &amp;amp;quot;required[^]]+&amp;amp;quot; | awk -F[ &#39;{print $2}&#39; | tr &#39;,&#39; &#39;\n&#39; | tr -d &#39;&amp;amp;quot;&#39;
test
test1
test2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;無理やり感があるがまぁ使えるのでよし。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>