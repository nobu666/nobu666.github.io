<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2013s on Real Beat</title>
    <link>http://nobu666.com/2013.html</link>
    <description>Recent content in 2013s on Real Beat</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>&amp;copy; nobu666.com</copyright>
    <lastBuildDate>Sun, 07 Apr 2013 16:31:17 +0900</lastBuildDate>
    <atom:link href="http://nobu666.com/2013/feed.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ScalaでProject Euler</title>
      <link>http://nobu666.com/2013/04/07/996.html</link>
      <pubDate>Sun, 07 Apr 2013 16:31:17 +0900</pubDate>
      
      <guid>http://nobu666.com/2013/04/07/996.html</guid>
      <description>&lt;iframe src=&#34;http://rcm-jp.amazon.co.jp/e/cm?t=realbeat-22&amp;o=9&amp;p=8&amp;l=as1&amp;asins=4844330845&amp;ref=qf_sp_asin_til&amp;fc1=000000&amp;IS2=1&amp;lt1=_blank&amp;m=amazon&amp;lc1=0000FF&amp;bc1=000000&amp;bg1=FFFFFF&amp;f=ifr&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;最近&lt;a href=&#34;http://www.amazon.co.jp/gp/product/4844330845/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4844330845&amp;linkCode=as2&amp;tag=realbeat-22&#34; title=&#34;Scalaスケーラブルプログラミング第2版&#34;&gt;コップ本&lt;/a&gt;一回読んだまま放置していたScalaをまた始めたので、とりあえず習うより慣れろの方針で&lt;a href=&#34;http://projecteuler.net/&#34; title=&#34;Project Euler&#34;&gt;Project Euler&lt;/a&gt;始めた。数学をかなり忘れているので、アルゴリズムを調べながらまったり進めようかと。コードは&lt;a href=&#34;https://github.com/nobu666/Euler-Scala&#34; title=&#34;github.com/nobu666/Euler-Scala&#34;&gt;github&lt;/a&gt;にまとめていく所存。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Solr勉強会第10回で話をしてきました</title>
      <link>http://nobu666.com/2013/03/27/991.html</link>
      <pubDate>Wed, 27 Mar 2013 01:53:18 +0900</pubDate>
      
      <guid>http://nobu666.com/2013/03/27/991.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://atnd.org/events/37170&#34; title=&#34;Solr勉強会第10回&#34;&gt;Solr勉強会第10回&lt;/a&gt;に参加して、話をさせて頂きました。&lt;a href=&#34;https://twitter.com/johtani&#34; title=&#34;@johtani&#34;&gt;@johtani&lt;/a&gt;さん、主催お疲れ様でした。また、会場を提供して頂き、ピザとビールをたらふくごちそうして頂いた&lt;a href=&#34;http://voyagegroup.com/&#34; title=&#34;VOYAGE GROUP&#34;&gt;VOYAGE GROUP&lt;/a&gt;様ありがとうございました。&lt;/p&gt;

&lt;p&gt;発表させていただいた資料は以下になります。&lt;/p&gt;

&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/17711986&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&#34; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt; &lt;/iframe&gt;

&lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;http://www.slideshare.net/NobutoshiOgata/solr10&#34; title=&#34;Solr勉強会第10回&#34; target=&#34;_blank&#34;&gt;Solr勉強会第10回&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/NobutoshiOgata&#34; target=&#34;_blank&#34;&gt;Nobutoshi Ogata&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

&lt;p&gt;歴史と銘打ったからにはもう少し古い時代の話を盛り込みたかったのですが、資料が現存していなかったりなんだりで、あまり突っ込んだ話をできませんでした。ただまぁSolr勉強会でSennaやTritonnの話を細かくしないでもいいかなということで、Luceneを使っていたときの話とSolrに乗り換えた話をメインにさせてもらいました。&lt;a href=&#34;http://www.slideshare.net/KojiSekiguchi/wikipediasolr&#34; title=&#34;辞書型コーパスからの類似語知識の獲得&#34;&gt;関口さんのプレゼン&lt;/a&gt;のあとだったので、これは空気的に俺が喋っていいのだろうかと思って内心焦ったのですがｗ 事例のひとつとしてなにかの参考なれば幸いです。&lt;/p&gt;

&lt;p&gt;他の方の発表がどういう感じだったのかという辺りは、『&lt;a href=&#34;http://shinodogg.com/?p=5098&#34; title=&#34;第10回Solr勉強会 at VOYAGE GROUPに行ってきました&#34;&gt;第10回Solr勉強会 at VOYAGE GROUPに行ってきました&lt;/a&gt;』『&lt;a href=&#34;http://johtani.jugem.jp/?eid=124&#34; title=&#34;第10回Solr勉強会を主催しました。#SolrJP&#34;&gt;第10回Solr勉強会を主催しました。#SolrJP&lt;/a&gt;』このあたりをご参照いただければ。&lt;/p&gt;

&lt;p&gt;懇親会でもいろいろな方とお話しさせていただいて大変刺激を受けましたので、検索周りでなにか新しいことにチャレンジする機会があればぜひフィードバックしていきたいな思いました。Solr CloudやらElastic Searchやら最近おもしろいものが出てきていますし、Solr単体でもまだ色々工夫のしがいがあるところだと思いますので精進しようと思います。参加されたみなさまお疲れ様でした。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chef11のchef-serverをHA構成にする</title>
      <link>http://nobu666.com/2013/03/13/985.html</link>
      <pubDate>Wed, 13 Mar 2013 15:36:50 +0900</pubDate>
      
      <guid>http://nobu666.com/2013/03/13/985.html</guid>
      <description>&lt;h1&gt;Chef11のchef-serverをHA構成にする&lt;/h1&gt;

&lt;h2&gt;はじめに&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://wiki.opscode.com/display/chef/Chef+11+Server+Preview&#34; title=&#34;Chef11&#34;&gt;Chef11&lt;/a&gt;はいままでのChefとはserverの構成がガラリと変わり、APIがRubyからErlangに、バックエンドのCouchDBがPostgreSQLになりました。その他はフロントエンドには&lt;a href=&#34;http://nginx.org/&#34; title=&#34;nginx&#34;&gt;nginx&lt;/a&gt;、WebUIに&lt;a href=&#34;http://unicorn.bogomips.org/&#34; title=&#34;unicorn&#34;&gt;unicorn&lt;/a&gt;。&lt;a href=&#34;http://www.rabbitmq.com/&#34; title=&#34;RabbitMQ&#34;&gt;RabbitMQ&lt;/a&gt;と&lt;a href=&#34;http://lucene.apache.org/solr/&#34; title=&#34;Solr&#34;&gt;Solr&lt;/a&gt;はそのまま。&lt;/p&gt;

&lt;p&gt;基本的にそのまま使ってて問題ないのだけども、やはりサーバーは壊れるのでバックアップがないと困るよね、ということで調べてもあんまり情報がなかったので、やってみたメモを残します。めんどいのでrootで作業しています。&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;とりあえずinstallする&lt;/h2&gt;
先ほどの&lt;a href=&#34;http://wiki.opscode.com/display/chef/Chef+11+Server+Preview&#34; title=&#34;Chef11&#34;&gt;Chef11&lt;/a&gt;のWikiにある、Quick Startをみて、Platformにあったパッケージをダウンロード。もしくは&lt;a href=&#34;http://www.opscode.com/chef/install/&#34; title=&#34;Install Chef&#34;&gt;Install Chef&lt;/a&gt;というページからダウンロード。Debian6でやりましたが、Ubuntu12用のパッケージではうまく動きませんでしたので、Ubuntu10用のを使いました。11のは知らん。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# wget https://opscode-omnitruck-release.s3.amazonaws.com/ubuntu/10.04/x86_64/chef-server_11.0.6-1.ubuntu.10.04_amd64.deb
# dpkg -i chef-server_11.0.6-1.ubuntu.10.04_amd64.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PrimaryとSecondary、2台のサーバーに入れましょう。&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;PostgreSQLのReplication&lt;/h2&gt;
PostgreSQLはほとんど知らないし、Chef11のパッケージは /opt/chef-server 以下にRubyやGemsやPostgreSQLやその他依存もろもろすっぽり収まって完結しているため、普通にPostgreSQLをinstallした場合とは勝手がちょっと違うので注意が必要です。&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Primaryの設定&lt;/h3&gt;
設定ファイルは /var/opt/chef-server/postgresql/data 以下にあります。まずアクセス許可。SECONDARY_SERVER_IPADDRESSは任意に読み替えてください。サブネットマスクまで必須です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# echo &amp;quot;host replication repl_user SECONDARY_SERVER_IPADDRESS/0 trust&amp;quot; &amp;gt;&amp;gt; /var/opt/chef-server/postgresql/data/pg_hba.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次にReplicationの設定。/var/opt/chef-server/postgresql/data/postgresql.conf をエディタで開いて、以下のようにします。hot_standby = onの設定はここでは意味が無いですが、あとでこのファイルがそのままSecondary側にコピーされるのでここで変えておいて問題ないです。
&lt;ul&gt;
    &lt;li&gt;listen_addresses = &amp;lsquo;*&amp;rsquo;&lt;/li&gt;
    &lt;li&gt;wal_level = hot_standby&lt;/li&gt;
    &lt;li&gt;max_wal_senders = 1&lt;/li&gt;
    &lt;li&gt;hot_standby = on&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;次にPostgreSQLのシェルに入ってユーザーを作りますが、opscode-pgsqlユーザーにならないとシェルに入れないので面倒です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# su opscode-pgsql -
$ pgsql postgres -c &amp;quot;CREATE ROLE repl_user LOGIN REPLICATION PASSWORD &#39;P@ssw0Rd&#39;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここまでやったらPostgreSQLを再起動。Chef11のコンポーネントたちは、daemontoolsの下で動いているので普通には再起動できません。が、専用の管理コマンドが用意されているのでそいつを使います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# chef-server-ctl restart postgresql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;Secondaryの設定&lt;/h3&gt;
Primaryからdebファイルをscpするなりこっちでもwgetするなりして、dpkg -iまでは一緒。installが終わったらPostgreSQLまわりの掃除をします。とりあえず止めて、消す。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# chef-server-ctl stop postgresql
# rm -rf /var/opt/chef-server/postgresql/data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;消したらPrimaryからデータを持ってきます。PRIMARY_SERVER_IPADDRESSは任意に読み替えてください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# /opt/chef-server/embedded/bin/pg_basebackup -x -p 5432 -h PRIMARY_SERVER_IPADDRESS -U repl_user -W -D /var/opt/chef-server/postgresql/data --progress --verbose
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;終わったらrecovery.confを作ります。sampleからコピって書き換えます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cp /opt/chef-server/embedded/share/postgresql/recovery.conf.sample /var/opt/chef-server/postgresql/data/recovery.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/var/opt/chef-server/postgresql/data/recovery.conf で最低限以下のようにいじる。application_nameは別になんでもいいっぽいです。
&lt;ul&gt;
    &lt;li&gt;standby_mode = on&lt;/li&gt;
    &lt;li&gt;primary_conninfo = &amp;lsquo;host=PRIMARY_SERVER_IPADDRESS port=5432 user=repl_user password=P@ssw0Rd application_name=stby&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;あとはrootで作業してしまったのでownerを変えて起動。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# chown -R opscode-pgsql:opscode-pgsql /var/opt/chef-server/postgresql/data
# chef-server-ctl start postgresql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;chef-server-ctl tailでログをみたり、chef-server-ctl statusでpostgresqlがrunになっていることを確認できればOKです。また、Primary側で以下のコマンドを叩くことでも確認できます。stateがstreamingになっていればOK。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo -u opscode-pgsql psql opscode_chef -c &amp;quot;SELECT * FROM pg_stat_replication&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;念のためSolrのindexは作りなおしておいたほうがいいです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# chef-server-ctl reindex
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h2&gt;切り替える&lt;/h2&gt;
さてフェイルオーバーさせてみます。いくつか方法がありますが、とりあえず手動でやります。Secondary側で、opscode-pgsqlユーザーで操作します。SecondaryはRead-Onlyなので、 CREATE TABLE test (i integer) とかやって失敗→切り替え→もっかいやったら成功、でPrimaryになったことを確認できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ /opt/chef-server/embedded/bin/pg_ctl promote -D /var/opt/chef-server/postgresql/data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんだけ。また2台構成に戻すには、同じ事をやってやればいいはずです。が、時間経ちすぎてWALファイルがなくなっちゃったとか、転送前にコケてて欠落してるとか、そういう場合はその限りではありません。ていうかそれはChefと関係ないんでそっち方面のマニュアルみるなり調べるなりしてください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>UbuntuにOpenGrokをinstall</title>
      <link>http://nobu666.com/2013/03/05/974.html</link>
      <pubDate>Tue, 05 Mar 2013 14:36:15 +0900</pubDate>
      
      <guid>http://nobu666.com/2013/03/05/974.html</guid>
      <description>&lt;p&gt;俺メモ&lt;/p&gt;

&lt;p&gt;[sourcecode language=&amp;ldquo;bash&amp;rdquo;]
sudo apt-get update
sudo apt-get install openjdk-6-jdk
sudo apt-get install tomcat7
wget &lt;a href=&#34;http://prdownloads.sourceforge.net/ctags/ctags-5.8.tar.gz&#34;&gt;http://prdownloads.sourceforge.net/ctags/ctags-5.8.tar.gz&lt;/a&gt;
tar xf ctags-5.8.tar.gz
cd ctags-5.8/
./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; sudo make install
cd ..
wget &lt;a href=&#34;http://hub.opensolaris.org/bin/download/Project+opengrok/files/opengrok-0.11.1.tar.gz&#34;&gt;http://hub.opensolaris.org/bin/download/Project+opengrok/files/opengrok-0.11.1.tar.gz&lt;/a&gt;
tar xf opengrok-0.11.1.tar.gz
wget &lt;a href=&#34;http://jflex.de/jflex-1.4.3.tar.gz&#34;&gt;http://jflex.de/jflex-1.4.3.tar.gz&lt;/a&gt;
tar xf jflex-1.4.3.tar.gz
cp jflex-1.4.3/lib/JFlex.jar opengrok-0.11.1/lib/lib/
echo &amp;ldquo;export JAVA_HOME=/usr/lib/jvm/java-6-openjdk-amd64&amp;rdquo; &amp;gt;&amp;gt; .bashrc
echo &amp;ldquo;EXUBERANT_CTAGS=/usr/local/bin/ctags&amp;rdquo; &amp;gt;&amp;gt; .bashrc
sudo sed -i &amp;ldquo;s/port=\&amp;ldquo;8080\&amp;ldquo;/port=\&amp;ldquo;2424\&amp;ldquo;/&amp;rdquo; /etc/tomcat7/server.xml
sudo /etc/init.d/tomcat restart
sudo mkdir -p /var/opengrok/{etc,data,src}
sudo chown -R tomcat7:tomcat7 /var/opengrok
sudo chown -R &lt;code&gt;whoami&lt;/code&gt;:&lt;code&gt;whoami&lt;/code&gt; /var/opengrok/src
sudo -u tomcat7 opengrok-0.11/bin/OpenGrok index
sudo -u tomcat7 OPENGROK_TOMCAT_BASE=/var/lib/tomcat7 opengrok-0.11/bin/OpenGrok deploy
```&lt;/p&gt;

&lt;p&gt;あとは /var/opengrok-0.11.1/src に検索対象のソースコード突っ込んでOpenGrok indexし直すだけ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ChefでRoleやRecipeを実行するとき渡すべき必須のattributesをチェックする</title>
      <link>http://nobu666.com/2013/02/21/959.html</link>
      <pubDate>Thu, 21 Feb 2013 16:06:57 +0900</pubDate>
      
      <guid>http://nobu666.com/2013/02/21/959.html</guid>
      <description>&lt;p&gt;例えばlvsを構築するときに、その下にぶら下がるreal serverたちのIPアドレスとかって、chef-client実行するときに-jオプション使ってjsonでattributes渡して欲しいわけですが、実際に実行する前に必須のものがなければ弾きたい、と思って色々ためした結果&lt;/p&gt;

&lt;p&gt;Roleならjsonに、Recipeならattributes/default.rbに、&lt;strong&gt;required&lt;/strong&gt;とかそういう感じの名前でattributesを作って、そこに配列で指定必須のattributesを並べて書いておく。&lt;/p&gt;

&lt;p&gt;[sourcecode language=&amp;ldquo;javascript&amp;rdquo;]
{
  &amp;ldquo;name&amp;rdquo;: &amp;ldquo;nannchara-kannchara&amp;rdquo;,
  &amp;ldquo;default_attributes&amp;rdquo;: {
  },
  &amp;ldquo;json_class&amp;rdquo;: &amp;ldquo;Chef::Role&amp;rdquo;,
  &amp;ldquo;env_run_lists&amp;rdquo;: {
  },
  &amp;ldquo;run_list&amp;rdquo;: [
    &amp;ldquo;recipe[foo]&amp;ldquo;,
    &amp;ldquo;recipe[bar::baz]&amp;rdquo;
  ],
  &amp;ldquo;description&amp;rdquo;: &amp;ldquo;hogeraccho&amp;rdquo;,
  &amp;ldquo;chef_type&amp;rdquo;: &amp;ldquo;role&amp;rdquo;,
  &amp;ldquo;override_attributes&amp;rdquo;: {
      &amp;ldquo;&lt;strong&gt;required&lt;/strong&gt;&amp;ldquo;: [
        &amp;ldquo;test&amp;rdquo;,
        &amp;ldquo;test1&amp;rdquo;,
        &amp;ldquo;test2&amp;rdquo;
      ]
  }
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
んで knife role from file nannchara-kannchara.json すると、knife search コマンドで取り出せるようになるので、あとは適当に整形すれば一覧として取り出せる

[sourcecode language=&amp;quot;bash&amp;quot;]
$ knife search role -F json -q &amp;quot;name:nannchara-kannchara AND __required__:*&amp;quot; | tr -d &#39;\n&#39; | tr -d &#39; &#39; | grep -oE &amp;quot;required[^]]+&amp;quot; | awk -F[ &#39;{print $2}&#39; | tr &#39;,&#39; &#39;\n&#39; | tr -d &#39;&amp;quot;&#39;
test
test1
test2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;無理やり感があるがまぁ使えるのでよし。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ハサミを買ったら猛烈に感動したのでお前らもこれは体験するべき</title>
      <link>http://nobu666.com/2013/01/14/954.html</link>
      <pubDate>Mon, 14 Jan 2013 02:17:49 +0900</pubDate>
      
      <guid>http://nobu666.com/2013/01/14/954.html</guid>
      <description>&lt;p&gt;あけましておめでとうございます。&lt;/p&gt;

&lt;p&gt;突然ですけどハサミ買ったんですハサミ。そしたらこれがあまりにいままでのハサミの概念を打ち破る、画期的というか革命的というか、とにかくたかがハサミでおじさん猛烈に感動したのでブログを書く次第です。&lt;/p&gt;

&lt;p&gt;もとはというと、3匹飼ってる猫のうち、1匹の毛玉が猛烈にすごくて、何万円かするバリカン試してみたりしたんだけど、まったく歯が立たずに諦めてたんだけど、放っておくと良くないらしいし、かといって全身麻酔で剃ってもらうのもリスクがあるのでできるなら自分でどうにかしたいと思っていてですね。んで色々調べていると、とりあえず櫛で皮膚を切らないようにして、その上でハサミで縦に切込みを入れて少しづつほぐしていくのがいいという話を聞いて、試してみたんだけど猫の毛が柔らかすぎて、普通のハサミでは毛を巻き込んでしまってうまく切れず、どうしたもんかと思っていた所でこのハサミに出会ったということです。&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-jp.amazon.co.jp/e/cm?t=realbeat-22&amp;o=9&amp;p=8&amp;l=as1&amp;asins=B0079WLDLW&amp;ref=qf_sp_asin_til&amp;fc1=000000&amp;IS2=1&amp;lt1=_blank&amp;m=amazon&amp;lc1=0000FF&amp;bc1=000000&amp;bg1=FFFFFF&amp;f=ifr&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;そのハサミというのがこれなんだけど、正直たかが文房具でこんなに感動するのはいつぶりか、というほどこれがすごくて。要は刃をカーブ形状にすることで、刃のどの部分をつかっても開く角度が一定になるように計算された形状になっており、どこで切っても最適な力加減でものを切ることができるという、気づいてしまえば至って単純なものであるのです。が、カーブくらいでなにを大げさなと思うじゃないですか。これがすごいのなんの!!!&lt;/p&gt;

&lt;p&gt;ハサミがこの世に生まれて何年経つのか知りませんけど、なぜ今までこうじゃなかったのかと思うに十分なすごさです。ハサミというものの概念を変える、革命的な商品であるといって過言ではないと思います。&lt;/p&gt;

&lt;p&gt;特に柔らかいものを切ろうとすると、普通刃先に絡まって切れなかったりするのがまったくなくて、スパっと切れるので感動する。この凄さをうまく言語化できなくてもどかしいくらい。ビニールとかダンボールとか、ニッチだと思うけど柔らかい猫の毛とか、驚くほどスムーズに切れるので買って損はないと自信を持って言える数少ない商品の一つだと思えます。しかももっと高いハサミも沢山あるなかで、これは1000円を切るお手頃価格である点もまた見逃せない。&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-jp.amazon.co.jp/e/cm?t=realbeat-22&amp;o=9&amp;p=8&amp;l=as1&amp;asins=B00462MGOG&amp;ref=qf_sp_asin_til&amp;fc1=000000&amp;IS2=1&amp;lt1=_blank&amp;m=amazon&amp;lc1=0000FF&amp;bc1=000000&amp;bg1=FFFFFF&amp;f=ifr&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;消せるボールペンとか&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-jp.amazon.co.jp/e/cm?t=realbeat-22&amp;o=9&amp;p=8&amp;l=as1&amp;asins=B003XOS4NU&amp;ref=qf_sp_asin_til&amp;fc1=000000&amp;IS2=1&amp;lt1=_blank&amp;m=amazon&amp;lc1=0000FF&amp;bc1=000000&amp;bg1=FFFFFF&amp;f=ifr&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;電動鼻毛カッターとか&lt;/p&gt;

&lt;p&gt;それ以来の感動的な商品です。たかがハサミ、されどハサミ。久しぶりにこんな安い値段で、心から買ってよかったと思えるものだったので勢いでブログ書きました。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>